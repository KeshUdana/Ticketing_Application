package managment.backend.service;

import Startup.SystemConfig;
import managment.backend.model.Ticket;
import managment.backend.model.TicketPool;
import managment.backend.model.User;
import managment.backend.model.Vendor;
import org.springframework.stereotype.Service;

@Service
public class ProducerService implements Runnable {
    private final TicketPool ticketPool; // Marked as final since it is initialized in the constructor
    private final Vendor vendor; // User object
    private volatile boolean running = true; // Flag to stop the thread gracefully

    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
    public ProducerService(TicketPool ticketPool, Vendor vendor) {
        this.ticketPool = ticketPool;
        this.vendor=vendor;
    }

    @Override
    public void run() {
        try {
            while (running) {
                // Produce a ticket
                Ticket ticket = createTicket();
                // Add ticket to the pool
                ticketPool.addTicket(ticket);

                // Log production
                System.out.println("Vendor "+ vendor.getVendorUsername()+" " + vendor.getVendorID() + " produced: " + ticket); // Fixed typo (vendorId -> vendorID)

                // Sleep for the global production rate duration
                Thread.sleep(1000 / SystemConfig.getVendorReleaseRate());
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Restore interrupted status
            System.out.println("Vendor " + vendor.getVendorID() + " stopped."); // Fixed typo (vendorId -> vendorID)
        }
    }

    // Method to create a ticket with unique attributes
    private Ticket createTicket() {
        double price = 50 + Math.random() * 100; // Random price between 50 and 150
        return new Ticket(price, "Vendor-" + vendor.getVendorID()); // Removed ticketId from constructor, as it's generated by the `Ticket` entity
    }

    // Stop the producer
    public void stop() {
        running = false;
    }
}
